#include <18F4550.h>
#device adc=10
#use delay(clock=48M) 
#fuses  HSPLL,  NOWDT,  NOBROWNOUT,  NOPROTECT,  NOLVP,  NODEBUG,  USBDIV,  PLL5, CPUDIV1, VREGEN, MCLR, NOPBADEN, WRTB, CPB,NOCPD,NOPUT
#build(reset=0x000800,interrupt=0x000808:0x000818) 
#ORG 0x0000,0x07ff {}
#use rs232(baud=9600,BITS =8,PARITY=N, xmit=PIN_C6, rcv=PIN_C7)
#use I2C(MASTER,sda=PIN_B0,scl=PIN_B1,force_hw) 
#use standard_io(B)

// CONSTANTES UTILIZADAS PARA LA EEPROM AT24C1024B
#define EE_dev_addr 0xA0
#define EE_P0_0 0x08
#define EE_P0_1 0x0A
#define EE_P0_2 0x0C
#define EE_P0_3 0x0E

/*****************FUNCION GLOBAL PARA  ESCRITURA DE EEPROM*********************/
void I2C_snd_char(int16 ee_p0 ,int16 addr1 ,int16 send_data) {
                i2c_start();
                I2C_write(EE_dev_addr|ee_p0);
                I2C_write(addr1>>8);
                I2C_write(addr1);
                I2C_write(send_data);
                I2C_stop();
                
}

/*******************FUNCION GLOBAL PARA LECTURA DE EEPROM**********************/
BYTE I2C_rcv_char(int16 ee_p0 ,int16 addr1) {
                BYTE c;
                I2C_start();
                I2C_write(EE_dev_addr | ee_p0);
                I2C_write(addr1>>8);
                I2C_write(addr1);
                I2C_start();
                I2C_write(EE_dev_addr | ee_p0 | 0x01);
                c = I2C_read(0);
                I2C_stop();
                return c;
}


void main(void)
   {
   int16 i,j,val,valR;
   int datoTX[2];
   int datoTX2[2];
   int datoTX3[2];
   char c;
   int16 adress,adress1;
   SET_TRIS_B(0xFF);
   // SETUP REGISTROS
   setup_comparator(NC_NC_NC_NC);   //Los comparadores Analogicos estaran apagados.
   setup_adc_ports(AN0_to_AN2|VSS_VDD);   //AN0 sera analogica las demas Digitales.
   SETUP_ADC(ADC_CLOCK_INTERNAL);   //La fuente de reloj para la conversion sera
   
 while(1){
  inicio: 
    adress=0;
       adress1=0;
       j=0;
       i=0;
     //  do {
     c=getc();
   //  c='1';
     //delay_us(1);
      //    } while(c!='1' && c!='2' && c!='3');
//!switch (c)
//!{
       if (c== '1') {
                      SET_ADC_CHANNEL(0);      //Lectura canal AN0.
                      val=read_adc();   
                      delay_ms(10);
                      datoTX[0]=val >> 8;     //Asignacion de desplazamiento hacia la derecha                                            
                      datoTX[1]=val & 0xFF;   //Asignacion AND de Bits                                       //Tiempo de Muestreo Señal
                      putc(datoTX[0]);           
                      putc(datoTX[1]);        //Envio de Datos
                     // delay_us(5);
                     output_high(PIN_C0);//LED is turned on to show that writing to the EEPROM has begun
                     // goto inicio;
                      }
        if (c== '2') {
     output_high(PIN_C0);//LED is turned on to show that writing to the EEPROM has begun
     
     adress = 0x00;
        for (i=0; i<1000; i++){
                         SET_ADC_CHANNEL(0);       //Lectura canal AN0.
                         val=read_adc();  
                         delay_ms(30);
                         datoTX2[0]=val >> 8;     //Asignacion de desplazamiento hacia la derecha                                            
                         datoTX2[1]=val & 0xFF;   //Asignacion AND de Bits                          
                   I2C_snd_char(EE_P0_0 ,adress ,datoTX2[0]);       // I2C SET
                   I2C_snd_char(EE_P0_1 ,adress ,datoTX2[1]);
                   
        adress++; // Increment up the address location on the EEPROM for the next time it writes something
        }
        adress1 = 0x00;
        for (j=0; j<1000; j++){
                         SET_ADC_CHANNEL(0);       //Lectura canal AN0.
                         val=read_adc();
                         delay_ms(30);
                         datoTX2[0]=val >> 8;     //Asignacion de desplazamiento hacia la derecha                                            
                         datoTX2[1]=val & 0xFF;   //Asignacion AND de Bits                          
                   I2C_snd_char(EE_P0_2 ,adress1 ,datoTX2[0]);       // I2C SET
                   I2C_snd_char(EE_P0_3 ,adress1 ,datoTX2[1]);
                   
        adress1++; // Increment up the address location on the EEPROM for the next time it writes something
        }
       adress=0;
       adress1=0;
        j=0;
       i=0; 
        
     output_low(PIN_C0); // LED is turned off to show that writing to the EEPROM is complete
     goto inicio;
    }
                         
        if (c== '3') {
     output_high(PIN_C0);//LED is turned on to show that writing to the EEPROM has begun
                                 
           for (adress=0; adress<1000; adress++) {                             
                          datoTX3[0] = I2C_rcv_char(EE_P0_0 ,adress);                        
                          datoTX3[1] = I2C_rcv_char(EE_P0_1 ,adress);                          
                          putc(datoTX3[0]);
                          putc(datoTX3[1]);
                          delay_ms(1);
                                                }
                                                           
        for (adress1=0; adress1<1000; adress1++) {                             
                          datoTX3[0] = I2C_rcv_char(EE_P0_2 ,adress1);                        
                          datoTX3[1] = I2C_rcv_char(EE_P0_3 ,adress1);                          
                          putc(datoTX3[0]);
                          putc(datoTX3[1]);
                          delay_ms(1);                                                 
                                                } 
                            c=getc();
                          delay_us(50);
                           if (adress==999 && adress1==999 && c=='3')  
                           {adress=0;adress1=0;} 
                           output_low(PIN_C0); // LED is turned off to show that writing to the EEPROM is complete
                           goto inicio;                
                        }//end if 3
} 
}//end void
   
   
   
                                   

  
